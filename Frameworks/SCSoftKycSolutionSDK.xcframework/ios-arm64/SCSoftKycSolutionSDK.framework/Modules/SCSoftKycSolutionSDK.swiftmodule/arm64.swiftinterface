// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SCSoftKycSolutionSDK
import AVFoundation
import AVKit
import CallKit
import Combine
import CommonCrypto
import CoreGraphics
import CoreImage
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Foundation
import ImageIO
import OpenSSL
@_exported import SCSoftKycSolutionSDK
import Swift
import UIKit
import Vision
import _Concurrency
import libtesseract
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class IDCardUtil : Foundation.ObservableObject {
  public var passportNumber: Swift.String
  public var dateOfBirth: Swift.String
  public var expiryDate: Swift.String
  public var passport: SCSoftKycSolutionSDK.NFCPassportModel?
  public func getMRZKey() -> Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : SCSoftKycSolutionSDK.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
public class SCSoftKycModel {
  public init()
  public var idFrontImage: UIKit.UIImage?
  public var idFrontFaceImage: UIKit.UIImage?
  public var idBackImage: UIKit.UIImage?
  public var selfieImage: UIKit.UIImage?
  public var mrzImage: UIKit.UIImage?
  public var autoCropped_idFrontImage: UIKit.UIImage?
  public var autoCropped_idBackImage: UIKit.UIImage?
  public var autoCropped_selfieImage: UIKit.UIImage?
  public var base64_idFrontImage: Swift.String?
  public var base64_idFrontFaceImage: Swift.String?
  public var base64_idBackImage: Swift.String?
  public var base64_selfieImage: Swift.String?
  public var base64_autoCropped_idFrontImage: Swift.String?
  public var base64_autoCropped_idBackImage: Swift.String?
  public var base64_autoCropped_selfieImage: Swift.String?
  public var nfcInformation: SCSoftKycSolutionSDK.SCSoftKycNFCInformation?
  public var mrzInformation: SCSoftKycSolutionSDK.SCSoftKycMRZInformation?
  @objc deinit
}
public protocol SCSoftKycIdFrontPhotoViewDelegate : AnyObject {
  func didCaptureIdFrontPhoto(_ kycView: SCSoftKycSolutionSDK.SCSoftKycIdFrontPhotoView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  func didCaptureIdFrontFacePhoto(_ kycView: SCSoftKycSolutionSDK.SCSoftKycIdFrontPhotoView, image: UIKit.UIImage, imageBase64: Swift.String)
  func didClose(_ kycView: SCSoftKycSolutionSDK.SCSoftKycIdFrontPhotoView)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycIdFrontPhotoView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var infoIdFrontText: Swift.String
  @_Concurrency.MainActor(unsafe) public var autoTakePhoto: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var activeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var passiveColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonCameraActiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCameraPassiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonFlashOnImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonFlashOffImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var cameraFlashState: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoInfo: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoCameraButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoFlashButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: SCSoftKycSolutionSDK.SCSoftKycIdFrontPhotoViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func startScanning()
  @_Concurrency.MainActor(unsafe) public func stopScanning()
  @_Concurrency.MainActor(unsafe) public func initiateScreen()
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public func refreshData()
  @objc deinit
}
extension SCSoftKycSolutionSDK.SCSoftKycIdFrontPhotoView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
public class SCSoftKycPersonDetails : Swift.Codable {
  public var name: Swift.String?
  public var surname: Swift.String?
  public var personalNumber: Swift.String?
  public var gender: Swift.String?
  public var birthDate: Swift.String?
  public var expiryDate: Swift.String?
  public var serialNumber: Swift.String?
  public var nationality: Swift.String?
  public var issuerAuthority: Swift.String?
  public var faceImageBase64: Swift.String?
  public var portraitImageBase64: Swift.String?
  public var signatureBase64: Swift.String?
  public var fingerPrints: [Swift.String]?
  public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : SCSoftKycSolutionSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
final public class LinkedListViewType<T> {
  public class LinkedListViewTypeNode<T> {
    public init(value: T)
    @objc deinit
  }
  public typealias Node = SCSoftKycSolutionSDK.LinkedListViewType<T>.LinkedListViewTypeNode<T>
  final public var last: SCSoftKycSolutionSDK.LinkedListViewType<T>.Node? {
    get
  }
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var count: Swift.Int {
    get
  }
  public init()
  final public subscript(index: Swift.Int) -> T {
    get
  }
  final public func node(at index: Swift.Int) -> SCSoftKycSolutionSDK.LinkedListViewType<T>.Node
  final public func append(_ value: T)
  final public func append(_ node: SCSoftKycSolutionSDK.LinkedListViewType<T>.Node)
  final public func append(_ list: SCSoftKycSolutionSDK.LinkedListViewType<T>)
  final public func insert(_ value: T, at index: Swift.Int)
  final public func insert(_ newNode: SCSoftKycSolutionSDK.LinkedListViewType<T>.Node, at index: Swift.Int)
  final public func insert(_ list: SCSoftKycSolutionSDK.LinkedListViewType<T>, at index: Swift.Int)
  final public func removeAll()
  @discardableResult
  final public func remove(node: SCSoftKycSolutionSDK.LinkedListViewType<T>.Node) -> T
  @discardableResult
  final public func removeLast() -> T
  @discardableResult
  final public func remove(at index: Swift.Int) -> T
  @objc deinit
}
extension SCSoftKycSolutionSDK.LinkedListViewType : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
extension SCSoftKycSolutionSDK.LinkedListViewType {
  final public func reverse()
}
extension SCSoftKycSolutionSDK.LinkedListViewType {
  final public func map<U>(transform: (T) -> U) -> SCSoftKycSolutionSDK.LinkedListViewType<U>
  final public func filter(predicate: (T) -> Swift.Bool) -> SCSoftKycSolutionSDK.LinkedListViewType<T>
}
extension SCSoftKycSolutionSDK.LinkedListViewType : Swift.ExpressibleByArrayLiteral {
  convenience public init(arrayLiteral elements: T...)
  public typealias ArrayLiteralElement = T
}
extension SCSoftKycSolutionSDK.LinkedListViewType : Swift.Collection {
  public typealias Index = SCSoftKycSolutionSDK.LinkedListViewTypeIndex<T>
  final public var startIndex: SCSoftKycSolutionSDK.LinkedListViewType<T>.Index {
    get
  }
  final public var endIndex: SCSoftKycSolutionSDK.LinkedListViewType<T>.Index {
    get
  }
  final public subscript(position: SCSoftKycSolutionSDK.LinkedListViewType<T>.Index) -> T {
    get
  }
  final public func index(after idx: SCSoftKycSolutionSDK.LinkedListViewType<T>.Index) -> SCSoftKycSolutionSDK.LinkedListViewType<T>.Index
  public typealias Element = T
  public typealias Indices = Swift.DefaultIndices<SCSoftKycSolutionSDK.LinkedListViewType<T>>
  public typealias Iterator = Swift.IndexingIterator<SCSoftKycSolutionSDK.LinkedListViewType<T>>
  public typealias SubSequence = Swift.Slice<SCSoftKycSolutionSDK.LinkedListViewType<T>>
}
public struct LinkedListViewTypeIndex<T> : Swift.Comparable {
  public static func == <T>(lhs: SCSoftKycSolutionSDK.LinkedListViewTypeIndex<T>, rhs: SCSoftKycSolutionSDK.LinkedListViewTypeIndex<T>) -> Swift.Bool
  public static func < <T>(lhs: SCSoftKycSolutionSDK.LinkedListViewTypeIndex<T>, rhs: SCSoftKycSolutionSDK.LinkedListViewTypeIndex<T>) -> Swift.Bool
}
precedencegroup ForwardPipe {
  associativity: left
  higherThan: LogicalConjunctionPrecedence
}
infix operator |> : ForwardPipe
public func |> <T, U>(value: T, function: ((T) -> U)) -> U
public protocol LanguageModelDataSource {
  var pathToTrainedData: Swift.String { get }
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
public class SCSoftKycMRZInformation : Swift.Codable {
  public var documentNumber: Swift.String?
  public var expiryDate: Swift.String?
  public var birthDate: Swift.String?
  public var documentType: Swift.String?
  public var countryCode: Swift.String?
  public var surnames: Swift.String?
  public var givenNames: Swift.String?
  public var nationality: Swift.String?
  public var gender: Swift.String?
  public var personalNumber: Swift.String?
  public var personalNumber2: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class SCSoftKycAdditionalPersonDetails : Swift.Codable {
  public var custodyInformation: Swift.String?
  public var fullDateOfBirth: Swift.String?
  public var nameOfHolder: Swift.String?
  public var otherNames: [Swift.String]?
  public var otherValidTDNumbers: [Swift.String]?
  public var permanentAddress: [Swift.String]?
  public var personalNumber: Swift.String?
  public var personalSummary: Swift.String?
  public var placeOfBirth: [Swift.String]?
  public var profession: Swift.String?
  public var proofOfCitizenship: Swift.String?
  public var tag: Swift.String?
  public var tagPresenceList: [Swift.String]?
  public var telephone: Swift.String?
  public var title: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> SCSoftKycSolutionSDK.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> SCSoftKycSolutionSDK.ASN1Item
  public func test()
  @objc deinit
}
public enum ResultIteratorLevel : libtesseract.TessPageIteratorLevel.RawValue {
  case block
  case paragraph
  case textline
  case word
  case symbol
  public var tesseractLevel: libtesseract.TessPageIteratorLevel {
    get
  }
  public init?(rawValue: libtesseract.TessPageIteratorLevel.RawValue)
  public typealias RawValue = libtesseract.TessPageIteratorLevel.RawValue
  public var rawValue: libtesseract.TessPageIteratorLevel.RawValue {
    get
  }
}
public struct QKMRZResult {
  public let documentType: Swift.String
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationality: Swift.String
  public let birthDate: Foundation.Date?
  public let sex: Swift.String?
  public let expiryDate: Foundation.Date?
  public let personalNumber: Swift.String
  public let personalNumber2: Swift.String?
  public let isDocumentNumberValid: Swift.Bool
  public let isBirthDateValid: Swift.Bool
  public let isExpiryDateValid: Swift.Bool
  public let isPersonalNumberValid: Swift.Bool?
  public let allCheckDigitsValid: Swift.Bool
}
public protocol SCSoftKycSelfieViewDelegate : AnyObject {
  func didCaptureSelfiePhoto(_ kycView: SCSoftKycSolutionSDK.SCSoftKycSelfieView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  func didClose(_ kycView: SCSoftKycSolutionSDK.SCSoftKycSelfieView)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycSelfieView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var activeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var passiveColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonCameraActiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCameraPassiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoCameraButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: SCSoftKycSolutionSDK.SCSoftKycSelfieViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func startScanning()
  @_Concurrency.MainActor(unsafe) public func stopScanning()
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public func showSelfieView()
  @objc deinit
}
extension SCSoftKycSolutionSDK.SCSoftKycSelfieView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : SCSoftKycSolutionSDK.DataGroup {
  public var securityInfos: [SCSoftKycSolutionSDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SwiftyTesseract {
  public var whiteList: Swift.String? {
    get
    set
  }
  public var blackList: Swift.String? {
    get
    set
  }
  public var preserveInterwordSpaces: Swift.Bool? {
    get
    set
  }
  public var minimumCharacterHeight: Swift.Int? {
    get
    set
  }
  public var version: Swift.String? {
    get
  }
  convenience public init(languages: [SCSoftKycSolutionSDK.RecognitionLanguage], dataSource: SCSoftKycSolutionSDK.LanguageModelDataSource = Bundle.main, engineMode: SCSoftKycSolutionSDK.EngineMode = .lstmOnly)
  convenience public init(language: SCSoftKycSolutionSDK.RecognitionLanguage, dataSource: SCSoftKycSolutionSDK.LanguageModelDataSource = Bundle.main, engineMode: SCSoftKycSolutionSDK.EngineMode = .lstmOnly)
  @available(*, deprecated, message: "migrate to init(language:dataSource:engineMode:)")
  convenience public init(language: SCSoftKycSolutionSDK.RecognitionLanguage, bundle: Foundation.Bundle = .main, engineMode: SCSoftKycSolutionSDK.EngineMode = .lstmOnly)
  @available(*, deprecated, message: "migrate to init(languages:dataSource:engineMode:)")
  convenience public init(languages: [SCSoftKycSolutionSDK.RecognitionLanguage], bundle: Foundation.Bundle = .main, engineMode: SCSoftKycSolutionSDK.EngineMode = .lstmOnly)
  @objc deinit
}
extension SCSoftKycSolutionSDK.SwiftyTesseract {
  @available(*, deprecated, message: "use performOCR(on:) or performOCRPublisher(on:)")
  public func performOCR(on image: UIKit.UIImage, completionHandler: (Swift.String?) -> ())
  public func performOCR(on image: UIKit.UIImage) -> Swift.Result<Swift.String, Swift.Error>
  @available(iOS 13.0, *)
  public func performOCRPublisher(on image: UIKit.UIImage) -> Combine.AnyPublisher<Swift.String, Swift.Error>
}
extension SCSoftKycSolutionSDK.SwiftyTesseract {
  public func createPDF(from images: [UIKit.UIImage]) throws -> Foundation.Data
}
extension SCSoftKycSolutionSDK.SwiftyTesseract {
  public func recognizedBlocks(for level: SCSoftKycSolutionSDK.ResultIteratorLevel) -> Swift.Result<[SCSoftKycSolutionSDK.RecognizedBlock], Swift.Error>
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: SCSoftKycSolutionSDK.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : SCSoftKycSolutionSDK.DataGroup {
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: SCSoftKycSolutionSDK.SecureMessagingSupportedAlgorithms, b: SCSoftKycSolutionSDK.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: SCSoftKycSolutionSDK.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
public protocol SCSoftKycIdBackPhotoViewDelegate : AnyObject {
  func didCaptureIdBackPhoto(_ kycView: SCSoftKycSolutionSDK.SCSoftKycIdBackPhotoView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  func didClose(_ kycView: SCSoftKycSolutionSDK.SCSoftKycIdBackPhotoView)
  func didAgeControlOver18(status: Swift.Bool)
  func didReadMrz(_ kycView: SCSoftKycSolutionSDK.SCSoftKycIdBackPhotoView, didRead mrzInformation: SCSoftKycSolutionSDK.SCSoftKycMRZInformation)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycIdBackPhotoView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var infoIdBackText: Swift.String
  @_Concurrency.MainActor(unsafe) public var autoTakePhoto: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var activeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var passiveColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonCameraActiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCameraPassiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonFlashOnImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonFlashOffImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var cameraFlashState: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoInfo: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoCameraButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoFlashButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: SCSoftKycSolutionSDK.SCSoftKycIdBackPhotoViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func startScanning()
  @_Concurrency.MainActor(unsafe) public func stopScanning()
  @_Concurrency.MainActor(unsafe) public func initiateScreen()
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public func refreshData()
  @objc deinit
}
extension SCSoftKycSolutionSDK.SCSoftKycIdBackPhotoView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [SCSoftKycSolutionSDK.SecurityInfo] {
    get
  }
  @objc deinit
}
public enum EngineMode : libtesseract.TessOcrEngineMode.RawValue {
  case tesseractOnly
  case lstmOnly
  case tesseractLstmCombined
  public init?(rawValue: libtesseract.TessOcrEngineMode.RawValue)
  public typealias RawValue = libtesseract.TessOcrEngineMode.RawValue
  public var rawValue: libtesseract.TessOcrEngineMode.RawValue {
    get
  }
}
extension Foundation.Bundle : SCSoftKycSolutionSDK.LanguageModelDataSource {
  public var pathToTrainedData: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : SCSoftKycSolutionSDK.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
public class SCSoftKycNFCInformation : Swift.Codable {
  public var docType: Swift.Int?
  public var personDetails: SCSoftKycSolutionSDK.SCSoftKycPersonDetails?
  public var additionalPersonDetails: SCSoftKycSolutionSDK.SCSoftKycAdditionalPersonDetails?
  public var mrzText: Swift.String?
  public var certificateBase64: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class QKMRZParser {
  public init(ocrCorrection: Swift.Bool = false)
  public func parse(mrzLines: [Swift.String]) -> SCSoftKycSolutionSDK.QKMRZResult?
  public func parse(mrzString: Swift.String) -> SCSoftKycSolutionSDK.QKMRZResult?
  @objc deinit
}
public enum ImageFormat {
  case png
  case jpeg(CoreGraphics.CGFloat)
}
extension UIKit.UIImage {
  public func toBase64(format: SCSoftKycSolutionSDK.ImageFormat) -> Swift.String?
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public typealias AnimationCompletion = (Swift.Bool) -> Swift.Void
public protocol PiPViewCoordinatorDelegate : AnyObject {
  func exitPictureInPicture()
}
public class PiPViewCoordinator {
  public var dragBoundInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  public enum Position {
    case lowerRightCorner
    case upperRightCorner
    case lowerLeftCorner
    case upperLeftCorner
    public static func == (a: SCSoftKycSolutionSDK.PiPViewCoordinator.Position, b: SCSoftKycSolutionSDK.PiPViewCoordinator.Position) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var initialPositionInSuperview: SCSoftKycSolutionSDK.PiPViewCoordinator.Position
  @available(*, deprecated, message: "The PiP window size is now fixed to 150px.")
  public var c: CoreGraphics.CGFloat
  weak public var delegate: SCSoftKycSolutionSDK.PiPViewCoordinatorDelegate?
  public init(withView view: UIKit.UIView)
  public func configureAsStickyView(withParentView parentView: UIKit.UIView? = nil)
  public func show(completion: SCSoftKycSolutionSDK.AnimationCompletion? = nil)
  public func hide(completion: SCSoftKycSolutionSDK.AnimationCompletion? = nil)
  public func enterPictureInPicture()
  @objc public func exitPictureInPicture()
  public func resetBounds(bounds: CoreGraphics.CGRect)
  public func stopDragGesture()
  open func configureExitPiPButton(target: Any, action: ObjectiveC.Selector) -> UIKit.UIButton
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : SCSoftKycSolutionSDK.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(SCSoftKycSolutionSDK.DataGroupId, Swift.Int)
  case error(SCSoftKycSolutionSDK.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: SCSoftKycSolutionSDK.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@available(iOS 13, *)
public protocol SCSoftKycNfcViewDelegate : AnyObject {
  func didReadNfc(_ kycNfcView: SCSoftKycSolutionSDK.SCSoftKycNfcView, didRead nfcInformation: SCSoftKycSolutionSDK.SCSoftKycNFCInformation)
  func didClose(_ kycNfcView: SCSoftKycSolutionSDK.SCSoftKycNfcView)
  func getNfcAvailable(_ kycNfcView: SCSoftKycSolutionSDK.SCSoftKycNfcView, hasNfc: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @available(iOS 13, *)
@IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycNfcView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var nfcErrorLimit: Swift.Int
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var nfcRequestText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcSuccessfulText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcReadingDataGroupText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcAuthenticatingWithPassportText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noMrzDataText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcErrorText: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoNoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonNoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenNfcInfo: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenNfcButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var forceNfc: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: SCSoftKycSolutionSDK.SCSoftKycNfcViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func initialize()
  @_Concurrency.MainActor(unsafe) public func initiateScreen(documentNumber: Swift.String, birthDate: Swift.String, expiryDate: Swift.String)
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public func nfcReadInput()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : SCSoftKycSolutionSDK.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: SCSoftKycSolutionSDK.CardAccess, tagReader: SCSoftKycSolutionSDK.TagReader) throws
  public func doPACE(mrzKey: Swift.String, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: SCSoftKycSolutionSDK.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: SCSoftKycSolutionSDK.NFCPassportReaderError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public enum RecognitionLanguage {
  case afrikaans
  case albanian
  case amharic
  case arabic
  case assamese
  case azerbaijani
  case azerbaijaniCyrillic
  case basque
  case belarusian
  case bengali
  case bosnian
  case bulgarian
  case burmese
  case catalanAndValencian
  case cebuano
  case centralKhmer
  case chineseSimplified
  case chineseTraditional
  case croatian
  case czech
  case cherokee
  case danish
  case dutchFlemish
  case dzongkha
  case english
  case englishMiddle
  case esperanto
  case estonian
  case finnish
  case frankish
  case french
  case frenchMiddle
  case galician
  case georgian
  case georgianOld
  case german
  case greekAncient
  case greekModern
  case guajarati
  case haitian
  case hebrew
  case hindi
  case hungarian
  case icelandic
  case inuktitut
  case indonesian
  case italian
  case italianOld
  case irish
  case javanese
  case japanese
  case kannada
  case kazakh
  case korean
  case kurdish
  case kyrgyz
  case lao
  case latin
  case lithuanian
  case malayalam
  case macedonian
  case malay
  case maltese
  case marathi
  case nepali
  case norwegian
  case oriya
  case pashto
  case persian
  case polish
  case portugese
  case punjabi
  case romanian
  case russian
  case sanskrit
  case serbian
  case serbianLatin
  case sinhala
  case slovak
  case slovenian
  case spanish
  case spanishOld
  case swahili
  case swedish
  case syriac
  case tamil
  case tagalog
  case tajik
  case telugu
  case thai
  case tibetan
  case tigrinya
  case turkish
  case uighur
  case ukrainian
  case urdu
  case uzbek
  case uzbekCyrillic
  case vietnamese
  case welsh
  case yiddish
  case custom(Swift.String)
}
extension SCSoftKycSolutionSDK.RecognitionLanguage : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : SCSoftKycSolutionSDK.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : SCSoftKycSolutionSDK.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : SCSoftKycSolutionSDK.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension SCSoftKycSolutionSDK.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension SCSoftKycSolutionSDK.SwiftyTesseract {
  public enum Error : Swift.Error {
    case imageConversionError
    case unableToExtractTextFromImage
    case unableToCreateRenderer
    case unableToBeginDocument
    case unableToProcessPage
    case unableToEndDocument
    case unableToRetrieveIterator
    public static func == (a: SCSoftKycSolutionSDK.SwiftyTesseract.Error, b: SCSoftKycSolutionSDK.SwiftyTesseract.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: SCSoftKycSolutionSDK.PACEMappingType, b: SCSoftKycSolutionSDK.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : SCSoftKycSolutionSDK.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> SCSoftKycSolutionSDK.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> SCSoftKycSolutionSDK.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> SCSoftKycSolutionSDK.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [SCSoftKycSolutionSDK.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [SCSoftKycSolutionSDK.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [SCSoftKycSolutionSDK.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [SCSoftKycSolutionSDK.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: SCSoftKycSolutionSDK.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
public protocol CXProviderProtocol : AnyObject {
  var configuration: CallKit.CXProviderConfiguration { get set }
  func setDelegate(_ delegate: CallKit.CXProviderDelegate?, queue: Dispatch.DispatchQueue?)
  func reportNewIncomingCall(with UUID: Foundation.UUID, update: CallKit.CXCallUpdate, completion: @escaping (Swift.Error?) -> Swift.Void)
  func reportCall(with UUID: Foundation.UUID, updated update: CallKit.CXCallUpdate)
  func reportCall(with UUID: Foundation.UUID, endedAt dateEnded: Foundation.Date?, reason endedReason: CallKit.CXCallEndedReason)
  func reportOutgoingCall(with UUID: Foundation.UUID, startedConnectingAt dateStartedConnecting: Foundation.Date?)
  func reportOutgoingCall(with UUID: Foundation.UUID, connectedAt dateConnected: Foundation.Date?)
  func invalidate()
}
public protocol CXCallControllerProtocol : AnyObject {
  var calls: [CallKit.CXCall] { get }
  func request(_ transaction: CallKit.CXTransaction, completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension CallKit.CXProvider : SCSoftKycSolutionSDK.CXProviderProtocol {
}
extension CallKit.CXCallController : SCSoftKycSolutionSDK.CXCallControllerProtocol {
  public var calls: [CallKit.CXCall] {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class JMCallKitProxy : ObjectiveC.NSObject {
  public static var callKitProvider: SCSoftKycSolutionSDK.CXProviderProtocol?
  public static var callKitCallController: SCSoftKycSolutionSDK.CXCallControllerProtocol?
  @objc public static var enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static func configureProvider(localizedName: Swift.String, ringtoneSound: Swift.String?, iconTemplateImageData: Foundation.Data?)
  @objc public static func isProviderConfigured() -> Swift.Bool
  @objc public static func addListener(_ listener: SCSoftKycSolutionSDK.JMCallKitListener)
  @objc public static func removeListener(_ listener: SCSoftKycSolutionSDK.JMCallKitListener)
  @objc public static func hasActiveCallForUUID(_ callUUID: Swift.String) -> Swift.Bool
  @objc public static func reportNewIncomingCall(UUID: Foundation.UUID, handle: Swift.String?, displayName: Swift.String?, hasVideo: Swift.Bool, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func reportCallUpdate(with UUID: Foundation.UUID, handle: Swift.String?, displayName: Swift.String?, hasVideo: Swift.Bool)
  @objc public static func reportCall(with UUID: Foundation.UUID, endedAt dateEnded: Foundation.Date?, reason endedReason: CallKit.CXCallEndedReason)
  @objc public static func reportOutgoingCall(with UUID: Foundation.UUID, startedConnectingAt dateStartedConnecting: Foundation.Date?)
  @objc public static func reportOutgoingCall(with UUID: Foundation.UUID, connectedAt dateConnected: Foundation.Date?)
  @objc public static func request(_ transaction: CallKit.CXTransaction, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QKMRZScanResult {
  final public let documentImage: UIKit.UIImage
  final public let documentType: Swift.String
  final public let countryCode: Swift.String
  final public let surnames: Swift.String
  final public let givenNames: Swift.String
  final public let documentNumber: Swift.String
  final public let nationality: Swift.String
  final public let birthDate: Foundation.Date?
  final public let sex: Swift.String?
  final public let expiryDate: Foundation.Date?
  final public let personalNumber: Swift.String
  final public let personalNumber2: Swift.String?
  public var faceImage: UIKit.UIImage? {
    get
  }
  @objc deinit
}
public protocol SCSoftKycJitsiViewDelegate : AnyObject {
  func didJitsiLeave()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycJitsiView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: SCSoftKycSolutionSDK.SCSoftKycJitsiViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func initialize()
  @_Concurrency.MainActor(unsafe) public func initiateScreen(url: Swift.String, room: Swift.String, token: Swift.String)
  @objc deinit
}
extension SCSoftKycSolutionSDK.SCSoftKycJitsiView : SCSoftKycSolutionSDK.JitsiMeetViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func conferenceJoined(_ data: [Swift.AnyHashable : Any]!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func conferenceTerminated(_ data: [Swift.AnyHashable : Any]!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func participantLeft(_ data: [Swift.AnyHashable : Any]!)
  @_Concurrency.MainActor(unsafe) public func leaveJitsi()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func conferenceWillJoin(_ data: [Swift.AnyHashable : Any]!)
}
@objc public protocol JMCallKitListener : ObjectiveC.NSObjectProtocol {
  @objc optional func providerDidReset()
  @objc optional func performAnswerCall(UUID: Foundation.UUID)
  @objc optional func performEndCall(UUID: Foundation.UUID)
  @objc optional func performSetMutedCall(UUID: Foundation.UUID, isMuted: Swift.Bool)
  @objc optional func performStartCall(UUID: Foundation.UUID, isVideo: Swift.Bool)
  @objc optional func providerDidActivateAudioSession(session: AVFAudio.AVAudioSession)
  @objc optional func providerDidDeactivateAudioSession(session: AVFAudio.AVAudioSession)
  @objc optional func providerTimedOutPerformingAction(action: CallKit.CXAction)
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: SCSoftKycSolutionSDK.CertificateType, b: SCSoftKycSolutionSDK.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [SCSoftKycSolutionSDK.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
public struct RecognizedBlock {
  public var text: Swift.String
  public var boundingBox: CoreGraphics.CGRect
  public var confidence: Swift.Float
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: SCSoftKycSolutionSDK.PassportAuthenticationStatus, b: SCSoftKycSolutionSDK.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var personalNumber: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var documentSigningCertificate: SCSoftKycSolutionSDK.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: SCSoftKycSolutionSDK.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [SCSoftKycSolutionSDK.DataGroupId] {
    get
  }
  public var dataGroupsRead: [SCSoftKycSolutionSDK.DataGroupId : SCSoftKycSolutionSDK.DataGroup] {
    get
  }
  public var dataGroupHashes: [SCSoftKycSolutionSDK.DataGroupId : SCSoftKycSolutionSDK.DataGroupHash] {
    get
  }
  public var cardAccess: SCSoftKycSolutionSDK.CardAccess? {
    get
  }
  public var BACStatus: SCSoftKycSolutionSDK.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: SCSoftKycSolutionSDK.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: SCSoftKycSolutionSDK.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: SCSoftKycSolutionSDK.DataGroupId, dataGroup: SCSoftKycSolutionSDK.DataGroup)
  public func getDataGroup(_ id: SCSoftKycSolutionSDK.DataGroupId) -> SCSoftKycSolutionSDK.DataGroup?
  public func dumpPassportData(selectedDataGroups: [SCSoftKycSolutionSDK.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [SCSoftKycSolutionSDK.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: SCSoftKycSolutionSDK.LogLevel = .info, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  public func readPassport(mrzKey: Swift.String, tags: [SCSoftKycSolutionSDK.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((SCSoftKycSolutionSDK.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (SCSoftKycSolutionSDK.NFCPassportModel?, SCSoftKycSolutionSDK.NFCPassportReaderError?) -> ())
  @objc deinit
}
@available(iOS 13, *)
extension SCSoftKycSolutionSDK.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : SCSoftKycSolutionSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
extension SCSoftKycSolutionSDK.ResultIteratorLevel : Swift.Equatable {}
extension SCSoftKycSolutionSDK.ResultIteratorLevel : Swift.Hashable {}
extension SCSoftKycSolutionSDK.ResultIteratorLevel : Swift.RawRepresentable {}
extension SCSoftKycSolutionSDK.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension SCSoftKycSolutionSDK.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
extension SCSoftKycSolutionSDK.EngineMode : Swift.Equatable {}
extension SCSoftKycSolutionSDK.EngineMode : Swift.Hashable {}
extension SCSoftKycSolutionSDK.EngineMode : Swift.RawRepresentable {}
extension SCSoftKycSolutionSDK.PiPViewCoordinator.Position : Swift.Equatable {}
extension SCSoftKycSolutionSDK.PiPViewCoordinator.Position : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.DocTypeEnum : Swift.RawRepresentable {}
extension SCSoftKycSolutionSDK.SwiftyTesseract.Error : Swift.Equatable {}
extension SCSoftKycSolutionSDK.SwiftyTesseract.Error : Swift.Hashable {}
extension SCSoftKycSolutionSDK.PACEMappingType : Swift.Equatable {}
extension SCSoftKycSolutionSDK.PACEMappingType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.DataGroupId : Swift.RawRepresentable {}
extension SCSoftKycSolutionSDK.LogLevel : Swift.Equatable {}
extension SCSoftKycSolutionSDK.LogLevel : Swift.Hashable {}
extension SCSoftKycSolutionSDK.LogLevel : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftKycSolutionSDK.CertificateItem : Swift.RawRepresentable {}
extension SCSoftKycSolutionSDK.PassportAuthenticationStatus : Swift.Equatable {}
extension SCSoftKycSolutionSDK.PassportAuthenticationStatus : Swift.Hashable {}
